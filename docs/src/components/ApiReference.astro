---
export interface Props {
  versions: string[];
}
const { versions } = Astro.props;
---

<style>
  .version-buttons {
    margin-bottom: 1.5rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .version-btn {
    font-family: var(--sl-font);
    padding: 0.25rem 0.5rem;
    border: 1px solid var(--sl-color-gray-5);
    background-color: transparent;
    color: var(--sl-color-text);
    border-radius: 0.25rem;
    cursor: pointer;
    transition: 
      background 0.2s, 
      border-color 0.2s, 
      color 0.2s, 
      box-shadow 0.2s, 
      transform 0.15s cubic-bezier(.4,2,.6,1);
    width: 60px;
    text-align: center;
    font-size: 0.95rem;
    min-width: 0;
    position: relative;
    overflow: hidden;
  }
  .version-btn:hover, .version-btn:focus {
    background: var(--p9-light-blue, #61a0ff);
    color: var(--sl-color-white);
    border-color: var(--p9-light-blue, #61a0ff);
    box-shadow: 0 2px 12px 0 rgba(0,145,255,0.15);
    transform: scale(1.08);
    z-index: 1;
  }
  .version-btn.active {
    font-family: var(--sl-font);
    background-color: var(--p9-blue);
    color: var(--sl-color-white);
    border-color: var(--p9-blue);
    font-weight: bold;
    font-size: 0.95rem;
    width: 60px;
    min-width: 0;
    box-shadow: 0 4px 16px 0 rgba(0,145,255,0.18);
    transform: scale(1.12);
  }
  [data-theme='dark'] .version-btn.active {
    font-family: var(--sl-font);
    background-color: #2d8cff;
    color: var(--sl-color-white);
    border-color: #2d8cff;
    font-weight: bold;
    font-size: 0.95rem;
    width: 60px;
    min-width: 0;
    box-shadow: 0 4px 16px 0 rgba(45,140,255,0.18);
    transform: scale(1.12);
  }

  .iframe-container {
    position: relative;
    width: 100%;
    aspect-ratio: 4 / 3;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.25rem;
    overflow: hidden;
  }
  #swagger-iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
  }
  .ripple {
    position: absolute;
    border-radius: 50%;
    transform: scale(0);
    animation: ripple 0.5s linear;
    background: rgba(255,255,255,0.5);
    pointer-events: none;
    z-index: 2;
  }
  @keyframes ripple {
    to {
      transform: scale(2.5);
      opacity: 0;
    }
  }
</style>

<div class="version-buttons">
  {versions.map(tag => (
    <button class="version-btn" data-src={`/vjailbreak/swagger-ui/${tag}/`}>{tag}</button>
  ))}
</div>
<div class="iframe-container">
  <iframe id="swagger-iframe" title="Swagger API Reference"></iframe>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.version-buttons').parentElement;
    const buttons = container.querySelectorAll('.version-btn');
    const iframe = container.querySelector('#swagger-iframe');
    const iframeContainer = container.querySelector('.iframe-container');

    function loadApiVersion(event) {
      buttons.forEach(btn => btn.classList.remove('active'));
      const clickedButton = event.currentTarget;
      clickedButton.classList.add('active');
      const newSrc = clickedButton.getAttribute('data-src');
      iframe.src = newSrc;
    }

    buttons.forEach(button => {
      button.addEventListener('click', function(e) {
        // Remove any old ripple
        const oldRipple = button.querySelector('.ripple');
        if (oldRipple) oldRipple.remove();

        // Create ripple
        const ripple = document.createElement('span');
        ripple.className = 'ripple';
        button.appendChild(ripple);

        // Set size and position
        const rect = button.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = (e.clientX - rect.left - size/2) + 'px';
        ripple.style.top = (e.clientY - rect.top - size/2) + 'px';

        // Remove after animation
        ripple.addEventListener('animationend', () => ripple.remove());
      });
    });

    let defaultIdx = 0;
    let localStorageVersion = undefined;
    try {
      localStorageVersion = localStorage.getItem('vjailbreakSelectedVersion');
    } catch (e) {}
    if (localStorageVersion) {
      buttons.forEach((btn, idx) => {
        if (btn.textContent === localStorageVersion) {
          defaultIdx = idx;
        }
      });
    } else if (typeof defaultVersion !== 'undefined') {
      buttons.forEach((btn, idx) => {
        if (btn.textContent === defaultVersion) {
          defaultIdx = idx;
        }
      });
    }
    if (buttons.length > 0) {
      buttons[defaultIdx].click();
    } else if (iframeContainer) {
      iframeContainer.innerHTML = '<p>No API versions found.</p>';
    }
  });
</script>